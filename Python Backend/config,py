import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Config:
    """Base configuration class"""
    
    # Flask configuration
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    DEBUG = os.environ.get('FLASK_DEBUG', 'False').lower() in ['true', '1', 'on']
    HOST = os.environ.get('FLASK_HOST', '127.0.0.1')
    PORT = int(os.environ.get('FLASK_PORT', 5000))
    
    # Blockchain configuration
    BLOCKCHAIN_NETWORK = os.environ.get('BLOCKCHAIN_NETWORK', 'sepolia')  # mainnet, sepolia, polygon, etc.
    RPC_URL = os.environ.get('RPC_URL', 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY')
    
    # Contract configuration
    CONTRACT_ADDRESS = os.environ.get('CONTRACT_ADDRESS', '')
    CONTRACT_ABI_PATH = os.environ.get('CONTRACT_ABI_PATH', 'contracts/abi.json')
    
    # Private key for backend transactions (optional, for server-side transactions)
    PRIVATE_KEY = os.environ.get('PRIVATE_KEY', '')
    
    # CORS settings
    CORS_ORIGINS = os.environ.get('CORS_ORIGINS', '*').split(',')
    
    # Gas settings
    DEFAULT_GAS_LIMIT = int(os.environ.get('DEFAULT_GAS_LIMIT', 300000))
    MAX_GAS_PRICE = int(os.environ.get('MAX_GAS_PRICE', 50))  # in gwei
    
    # API settings
    API_RATE_LIMIT = os.environ.get('API_RATE_LIMIT', '100 per hour')
    
    # Database (if needed)
    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///app.db')
    
    # Logging
    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
    LOG_FILE = os.environ.get('LOG_FILE', 'app.log')

class DevelopmentConfig(Config):
    """Development configuration"""
    DEBUG = True
    RPC_URL = 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY'

class ProductionConfig(Config):
    """Production configuration"""
    DEBUG = False
    SECRET_KEY = os.environ.get('SECRET_KEY')
    
    # Production RPC URL
    RPC_URL = os.environ.get('RPC_URL')
    
    if not RPC_URL:
        raise ValueError("RPC_URL must be set in production")

class TestingConfig(Config):
    """Testing configuration"""
    TESTING = True
    DEBUG = True
    RPC_URL = 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY'

# Configuration mapping
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

# Frontend styling configuration (CSS classes and themes)
class UIConfig:
    """UI configuration and styling constants"""
    
    # Color scheme
    COLORS = {
        'primary': '#3b82f6',      # Blue
        'secondary': '#6b7280',    # Gray
        'success': '#10b981',      # Green
        'warning': '#f59e0b',      # Yellow
        'error': '#ef4444',        # Red
        'background': '#f9fafb',   # Light gray
        'text': '#1f2937',         # Dark gray
        'white': '#ffffff'
    }
    
    # Button styles
    BUTTON_CLASSES = {
        'primary': 'bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200',
        'secondary': 'bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200',
        'success': 'bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200',
        'danger': 'bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200'
    }
    
    # Input styles
    INPUT_CLASSES = {
        'default': 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent',
        'error': 'w-full px-3 py-2 border border-red-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent bg-red-50'
    }
    
    # Card styles
    CARD_CLASSES = {
        'default': 'bg-white rounded-lg shadow-md p-6 border border-gray-200',
        'highlighted': 'bg-white rounded-lg shadow-lg p-6 border border-blue-200 ring-2 ring-blue-100'
    }
    
    # Alert styles
    ALERT_CLASSES = {
        'info': 'bg-blue-50 border border-blue-200 text-blue-800 p-4 rounded-lg',
        'success': 'bg-green-50 border border-green-200 text-green-800 p-4 rounded-lg',
        'warning': 'bg-yellow-50 border border-yellow-200 text-yellow-800 p-4 rounded-lg',
        'error': 'bg-red-50 border border-red-200 text-red-800 p-4 rounded-lg'
    }
    
    # Typography
    TYPOGRAPHY = {
        'h1': 'text-3xl font-bold text-gray-900 mb-4',
        'h2': 'text-2xl font-semibold text-gray-800 mb-3',
        'h3': 'text-xl font-medium text-gray-700 mb-2',
        'body': 'text-gray-600 leading-relaxed',
        'caption': 'text-sm text-gray-500'
    }
    
    # Layout
    LAYOUT = {
        'container': 'max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8',
        'section': 'mb-8',
        'grid': 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
    }
